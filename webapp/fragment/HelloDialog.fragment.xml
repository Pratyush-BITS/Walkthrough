<core:FragmentDefinition
    xmlns="sap.m"
    xmlns:core="sap.ui.core"
    displayBlock ="true"
>
    <Dialog
        id = "helloDialog"
        title = "Hello {/recipient/name}"      
    >
        <content>
            <HBox>
                <VBox>
                    <core:Icon src="sap-icon://sap-ui5" size ="8rem" class="sapUiMediumMargin"/>
                </VBox>
                <VBox>
                    <Text 
                        text="Fragments are light-weight UI parts (UI subtrees) which can be reused but do not have any controller. &#13;&#10;
                        This means, whenever you want to define a certain part of your UI to be reusable across multiple views, or &#13;&#10;
                        when you want to exchange some parts of a view against one another under certain circumstances (different &#13;&#10;
                        user roles, edit mode vs read-only mode), a fragment is a good candidate, especially where no additional &#13;&#10;
                        controller logic is required. A fragment can consist of 1 to n controls. At runtime, fragments placed in a &#13;&#10;
                        view behave similar to 'normal' view content, which means controls inside the fragment will just be included &#13;&#10;
                        into the viewâ€™s DOM when rendered. There are of course controls that are not designed to become part of a view, &#13;&#10;
                        for example, dialogs."
                        class="sapUiSmallMargin"
                    />
                </VBox>
            </HBox>
        </content>
        <endButton>
            <Button text="{i18n>dialogCloseButtonText}" press=".onCloseDialog"/>
        </endButton>
    </Dialog>
</core:FragmentDefinition>